// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Is this an A or a C instruction?
	Not(in=instruction[15], out=aInstruction);
	
	// Decode the instruction if it is C instruction (i.e. instruction[15] is set)

	//   is the A bit set?
	And(a=instruction[15], b=instruction[12], out=aBit);

	// control bits for the ALU
	And(a=instruction[15], b=instruction[11], out=c1); // zero A/M?
	And(a=instruction[15], b=instruction[10], out=c2); // invert A/M?
	And(a=instruction[15], b=instruction[9],  out=c3); // zero D?
	And(a=instruction[15], b=instruction[8],  out=c4); // invert D?
	And(a=instruction[15], b=instruction[7],  out=c5); // And or Add?
	And(a=instruction[15], b=instruction[6],  out=c6); // invert output

	// destination bits
	And(a=instruction[15], b=instruction[5], out=d1);             // A Register
	And(a=instruction[15], b=instruction[4], out=d2);             // D Register
	And(a=instruction[15], b=instruction[3], out=d3, out=writeM); // RAM

	// jump bits
	And(a=instruction[15], b=instruction[2], out=j1);
	And(a=instruction[15], b=instruction[1], out=j2);
	And(a=instruction[15], b=instruction[0], out=j3);
	
	// D Register, always feeds the ALU x input.
	// Note this is exactly the same as a Register
	// except that it provides a GUI, and is used
	// in the test code.
	// Always takes input from aluOut, but only updates
	// if the appropriate destination bit d2 is set.
	DRegister(in=aluOut, out=x, load=d2);
	
	// A Register
	// If an A instruction, load the A register from the instruction.
	// Load from aluOut if the d1 destination bit is set.
	// Otherwise keep previous value.
	Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn);
	Or(a=aInstruction, b=d1, out=loadA);
	Register(in=aIn, out=aRegister, out[0..14]=addressM, load=loadA);
	
	// If the aBit is set, ALU y is from RAM, otherwise from A Register.
	Mux16(a=aRegister, b=inM, sel=aBit, out=y);

	// 'eq' is aluOut==0, 'lt' is aluOut < 0
	ALU(x=x, y=y, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
	    out=aluOut, zr=eq, ng=lt);
	
	// Emit aluOut on outM if a destination RAM is requested (d3 is set.)
	// This isn't strictly necessary, because outM should only be used if
	// writeM is set, and it also adds another level of logic, but it's
	// somewhat cleaner and less unexpected to drive outM to 0 if it's not
	// selected as a destination. In a real chip the output to memory would
	// probably go hi Z so another device could assert a signal on the bus.
	Mux16(a=false, b=aluOut, sel=d3, out=outM);
	
	// Jump logic: comparing aluOut to zero,
	// j1 j2 j3    condtion to jump
	//  0  0  0    null no jump
	//  0  0  1    JGT  jump if aluOut greater than 0
	//  0  1  0    JEQ  jump if aluOut equal to 0
	//  0  1  1    JGE  jump if aluOut greater than or equal to 0
	//  1  0  0    JLT  jump if aluOut less than 0
	//  1  0  1    JNE  jump if aluOut not equal to 0
	//  1  1  0    JLE  jump if aluOut less than or equal to 0
	//  1  1  1    JMP  jump always

	// greater than
	And(a=ge, b=ne, out=gt);
	// equal to, already covered
	// greater than equal to
	Not(in=lt, out=ge);
	// not equal
	Not(in=eq, out=ne);
	// less than, already covered
	// less than equal to
	Or(a=lt, b=eq, out=le);
	
	// To do the jump logic, an 8 way multiplexor can be used
	Mux8Way(a=false, b=gt, c=eq, d=ge, e=lt, f=ne, g=le, h=true,
			sel[0]=j3, sel[1]=j2, sel[2]=j1,
			out=jump);
	
	PC(in=aRegister, load=jump, inc=true, reset=reset, out[0..14]=pc);
}